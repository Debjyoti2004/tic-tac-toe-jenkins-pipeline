pipeline {
    agent { label 'build-agent' }

    environment {
        IMAGE_NAME = 'my-todo-app'
        DEPLOY_SERVER_CRED_ID = 'deploy-server-private-key'
        DOCKER_CRED_ID = 'docker-hub-cred'
    }

    options {
        timeout(time: 30, unit: 'MINUTES')
        timestamps()
        ansiColor('xterm') 
    }

    stages {
        stage('Prepare Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Git: Clone Repository') {
            steps {
                git url: 'https://github.com/Debjyoti2004/tic-tac-toe-jenkins-pipeline.git', branch: 'master'
            }
        }

        stage('Docker: Login to Docker') {
            steps {
                withCredentials([
                    usernamePassword(
                        credentialsId: "${env.DOCKER_CRED_ID}",
                        usernameVariable: 'DOCKER_USERNAME',
                        passwordVariable: 'DOCKER_PASSWORD'
                    )
                ]) {
                    sh """
                        echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
                        echo "Logged in to Docker Hub"
                    """
                }
            }
        }

        stage('Docker: Build and Push Docker Image') {
            steps {
                withCredentials([
                    usernamePassword(
                        credentialsId: "${env.DOCKER_CRED_ID}",
                        usernameVariable: 'DOCKER_USERNAME',
                        passwordVariable: 'DOCKER_PASSWORD'
                    )
                ]) {
                    script {
                        def tag = "${env.DOCKER_USERNAME}/${env.IMAGE_NAME}:${env.BUILD_NUMBER}"
                        env.FULL_IMAGE_TAG = tag
                        sh """
                            docker build -t ${tag} .
                            docker push ${tag}
                            echo "Pushed image to Docker Hub: ${tag}"
                        """
                    }
                }
            }
        }

        stage('SSH: Deploy to Server') {
            steps {
                withCredentials([
                    string(credentialsId: 'deploy-server-ip', variable: 'DEPLOY_SERVER_IP'),
                    sshUserPrivateKey(credentialsId: "${env.DEPLOY_SERVER_CRED_ID}", keyFileVariable: 'SSH_KEY'),
                    usernamePassword(
                        credentialsId: "${env.DOCKER_CRED_ID}",
                        usernameVariable: 'DOCKER_USERNAME',
                        passwordVariable: 'DOCKER_PASSWORD'
                    )
                ]) {
                    script {
                        sh """
ssh -i \$SSH_KEY -o StrictHostKeyChecking=no ubuntu@\$DEPLOY_SERVER_IP <<EOF
docker login -u \$DOCKER_USERNAME --password-stdin <<DOCKERPASS
\$DOCKER_PASSWORD
DOCKERPASS
docker pull ${env.FULL_IMAGE_TAG}
docker stop ${env.IMAGE_NAME} || true
docker rm ${env.IMAGE_NAME} || true
docker run -d --name ${env.IMAGE_NAME} -p 5001:5000 ${env.FULL_IMAGE_TAG}
EOF
                        """
                    }
                }
            }
        }
    }

    post {
        success {
            echo "✅ Deployment succeeded!"
        }
        failure {
            echo "❌ Build or deployment failed!"
        }
        always {
            cleanWs()
        }
    }
}

